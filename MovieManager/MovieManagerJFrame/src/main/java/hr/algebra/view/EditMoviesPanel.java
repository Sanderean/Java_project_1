/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.GenericTransferable;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.model.ModalWindowCreator;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieActor;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.MovieDirector;
import hr.algebra.model.MovieGenre;
import hr.algebra.model.MovieXML;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import java.awt.Frame;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author andru
 * @param <T>
 */
public class EditMoviesPanel<T> extends javax.swing.JPanel {

    /**
     * Creates new form UploadMoviesPanel
     */
    public EditMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        lbIcon = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        lbPicturePathError = new javax.swing.JLabel();
        btnChoosePicture = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        lbPubDateError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tfDescription = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbDurationError = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfYear = new javax.swing.JTextField();
        lbYearError = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        tfTrailerURL = new javax.swing.JTextField();
        lbTrailerURLError = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lbActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lbAllActors = new javax.swing.JList<>();
        jLabel19 = new javax.swing.JLabel();
        btnAddActor = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        cbMultipleEntities = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lbDirectors = new javax.swing.JList<>();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lbGenres = new javax.swing.JList<>();
        jLabel21 = new javax.swing.JLabel();
        lbActorsError = new javax.swing.JLabel();
        lbDirectorsError = new javax.swing.JLabel();
        lbGenresError = new javax.swing.JLabel();
        btnSaveXml = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        tfPicturePath.setEditable(false);

        lbPicturePathError.setForeground(new java.awt.Color(255, 0, 51));
        lbPicturePathError.setText("X");

        btnChoosePicture.setText("Choose");
        btnChoosePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoosePictureActionPerformed(evt);
            }
        });

        jLabel2.setText("Title:");

        lbTitleError.setForeground(new java.awt.Color(255, 0, 51));
        lbTitleError.setText("X");

        jLabel4.setText("Publish Date:");

        tfPubDate.setName("Date"); // NOI18N

        lbPubDateError.setForeground(new java.awt.Color(255, 0, 51));
        lbPubDateError.setText("X");

        jLabel6.setText("Description:");

        lbDescriptionError.setForeground(new java.awt.Color(255, 0, 51));
        lbDescriptionError.setText("X");

        tfDescription.setColumns(20);
        tfDescription.setRows(5);
        jScrollPane2.setViewportView(tfDescription);

        jLabel8.setText("Duration:");

        lbDurationError.setForeground(new java.awt.Color(255, 0, 51));
        lbDurationError.setText("X");

        jLabel10.setText("Year:");

        lbYearError.setForeground(new java.awt.Color(255, 0, 51));
        lbYearError.setText("X");

        jLabel14.setText("Trailer URL:");

        lbTrailerURLError.setForeground(new java.awt.Color(255, 0, 51));
        lbTrailerURLError.setText("X");

        lbActors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lbActors);

        jScrollPane4.setViewportView(lbAllActors);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("This movie actors");

        btnAddActor.setText("Add actor");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnDeleteMovie.setText("Delete movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnAddMovie.setText("Add movie");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        cbMultipleEntities.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All actors", "All directors", "All genres" }));
        cbMultipleEntities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMultipleEntitiesActionPerformed(evt);
            }
        });

        lbDirectors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(lbDirectors);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("This movie directors");

        lbGenres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(lbGenres);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("This movie genres");

        lbActorsError.setForeground(new java.awt.Color(255, 0, 51));
        lbActorsError.setText("X");

        lbDirectorsError.setForeground(new java.awt.Color(255, 0, 51));
        lbDirectorsError.setText("X");

        lbGenresError.setForeground(new java.awt.Color(255, 0, 51));
        lbGenresError.setText("X");

        btnSaveXml.setText("Save movies XML");
        btnSaveXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveXmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfTrailerURL, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbTrailerURLError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbYearError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(cbMultipleEntities, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addComponent(lbIcon))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSaveXml, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChoosePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnAddMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChoosePicture))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateMovie)
                            .addComponent(btnDeleteMovie))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddMovie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveXml)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(lbDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTitleError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPubDateError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(lbDescriptionError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTrailerURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTrailerURLError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDurationError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbYearError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(cbMultipleEntities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddActor)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
        try {
            loadAllActorsModelWithActors();
            loadActorsModel();
            loadDirectorsModel();
            loadGenresModel();
            cbMultipleEntities.setSelectedIndex(0);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
        try {
            loadAllActorsModelWithActors();
            loadActorsModel();
            loadDirectorsModel();
            loadGenresModel();
            cbMultipleEntities.setSelectedIndex(0);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnChoosePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoosePictureActionPerformed
        Optional<File> fileOpt = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (fileOpt.isPresent()) {
            File file = fileOpt.get();
            tfPicturePath.setText(file.getAbsolutePath());
            setIcon(lbIcon, file);
        } else {
            // Опционально, обработайте случай, когда файл не был выбран или тип файла некорректен
            MessageUtils.showErrorMessage("Ошибка", "Файл не выбран или некорректный формат!");
        }
    }//GEN-LAST:event_btnChoosePictureActionPerformed

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Info", "Please select movie");
            return;
        }

        try {
            repository.deleteMovieActors(selectedMovie.getId());
            repository.deleteMovieDirectors(selectedMovie.getId());
            repository.deleteMovieGenres(selectedMovie.getId());

            if (selectedMovie.getPosterURL() != null && Files.exists(Paths.get(selectedMovie.getPosterURL()))) {
                Files.deleteIfExists(Paths.get(selectedMovie.getPosterURL()));
            }
            repository.deleteMovie(selectedMovie.getId());
            model.setMovies(repository.selectMovies());

            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Info", "Please select movie");
            return;
        }

        if (!formValid()) {
            return;
        }
        try {
            repository.deleteMovieActors(selectedMovie.getId());
            repository.deleteMovieDirectors(selectedMovie.getId());
            repository.deleteMovieGenres(selectedMovie.getId());

            if (!tfPicturePath.getText().trim().equals(selectedMovie.getPosterURL())) {
                if (selectedMovie.getPosterURL() != null && Files.exists(Paths.get(selectedMovie.getPosterURL()))) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPosterURL()));
                }
                String localPath = uploadPicture();
                selectedMovie.setPosterURL(localPath);
            } else {
                selectedMovie.setPosterURL(tfPicturePath.getText());
            }

            selectedMovie.setTitle(tfTitle.getText().trim());
            selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
            selectedMovie.setYear(Integer.parseInt(tfYear.getText().trim()));
            selectedMovie.setDescription(tfDescription.getText().trim());
            selectedMovie.setTrailerURL(tfTrailerURL.getText());
            selectedMovie.setPubDate(LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER));

            repository.updateMovie(selectedMovie.getId(), selectedMovie);
            model.setMovies(repository.selectMovies());

            List<MovieActor> movieActors = new ArrayList<>();
            DefaultListModel<Actor> actorListModel = (DefaultListModel<Actor>) lbActors.getModel();
            for (int i = 0; i < actorListModel.getSize(); i++) {
                Actor actor = actorListModel.getElementAt(i);
                MovieActor movieActor = new MovieActor(
                        selectedMovie.getId(), actor.getId()
                );
                movieActors.add(movieActor);
            }

            List<MovieDirector> movieDirectors = new ArrayList<>();
            DefaultListModel<Director> directorListModel = (DefaultListModel<Director>) lbDirectors.getModel();
            for (int i = 0; i < directorListModel.getSize(); i++) {
                Director director = directorListModel.getElementAt(i);
                MovieDirector movieDirector = new MovieDirector(
                        selectedMovie.getId(), director.getId()
                );
                movieDirectors.add(movieDirector);
            }

            List<MovieGenre> movieGenres = new ArrayList<>();
            DefaultListModel<Genre> genreListModel = (DefaultListModel<Genre>) lbGenres.getModel();
            for (int i = 0; i < genreListModel.getSize(); i++) {
                Genre genre = genreListModel.getElementAt(i);
                MovieGenre movieGenre = new MovieGenre(
                        selectedMovie.getId(), genre.getId()
                );
                movieGenres.add(movieGenre);
            }

            repository.createMovieActors(movieActors);
            repository.createMovieDirectors(movieDirectors);
            repository.createMovieGenres(movieGenres);

            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (!formValid()) {
            return;
        }
        try {
            String localPath = uploadPicture();

            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER),
                    tfDescription.getText().trim(),
                    Integer.parseInt(tfDuration.getText().trim()),
                    Integer.parseInt(tfYear.getText().trim()),
                    localPath,
                    tfTrailerURL.getText()
            );

            int movieID = repository.createMovie(movie);
            model.setMovies(repository.selectMovies());

            List<MovieActor> movieActors = new ArrayList<>();
            DefaultListModel<Actor> actorListModel = (DefaultListModel<Actor>) lbActors.getModel();
            for (int i = 0; i < actorListModel.getSize(); i++) {
                Actor actor = actorListModel.getElementAt(i);
                MovieActor movieActor = new MovieActor(
                        movieID, actor.getId()
                );
                movieActors.add(movieActor);
            }

            List<MovieDirector> movieDirectors = new ArrayList<>();
            DefaultListModel<Director> directorListModel = (DefaultListModel<Director>) lbDirectors.getModel();
            for (int i = 0; i < directorListModel.getSize(); i++) {
                Director director = directorListModel.getElementAt(i);
                MovieDirector movieDirector = new MovieDirector(
                        movieID, director.getId()
                );
                movieDirectors.add(movieDirector);
            }

            List<MovieGenre> movieGenres = new ArrayList<>();
            DefaultListModel<Genre> genreListModel = (DefaultListModel<Genre>) lbGenres.getModel();
            for (int i = 0; i < genreListModel.getSize(); i++) {
                Genre genre = genreListModel.getElementAt(i);
                MovieGenre movieGenre = new MovieGenre(
                        movieID, genre.getId()
                );
                movieGenres.add(movieGenre);
            }

            repository.createMovieActors(movieActors);
            repository.createMovieDirectors(movieDirectors);
            repository.createMovieGenres(movieGenres);
            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed

        String item = (String) cbMultipleEntities.getSelectedItem();
        Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);
        switch (item) {
            case "All actors" -> {
                new AddNewActor(parentFrame, true).setVisible(true);

                try {
                    loadAllActorsModelWithActors();
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "All directors" -> {
                new AddNewDirector(parentFrame, true).setVisible(true);

                try {
                    loadAllActorsModelWithDirectors();
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "All genres" -> {
                new AddNewGenre(parentFrame, true).setVisible(true);

                try {
                    loadAllActorsModelWithGenres();
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            default -> {
            }
        }
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
        try {
            loadAllActorsModelWithActors();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_formComponentShown

    private void handleDoubleClick() {
        String item = (String) cbMultipleEntities.getSelectedItem();
        Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);

        if (lbAllActors.getSelectedIndex() != -1) {
            switch (item) {
                case "All actors" -> {
                    try {
                        new ActorInfo(parentFrame, true, lbAllActors.getSelectedValue()).setVisible(true);
                        loadAllActorsModelWithActors();
                        if (tbMovies.getSelectedRow() != -1) {
                            loadActorsModel();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                case "All directors" -> {
                    try {
                        new DirectorInfo(parentFrame, true, lbAllActors.getSelectedValue()).setVisible(true);
                        loadAllActorsModelWithDirectors();
                        if (tbMovies.getSelectedRow() != -1) {
                            loadDirectorsModel();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                case "All genres" -> {
                    try {
                        new GenreInfo(parentFrame, true, lbAllActors.getSelectedValue()).setVisible(true);
                        loadAllActorsModelWithGenres();
                        if (tbMovies.getSelectedRow() != -1) {
                            loadGenresModel();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                default -> {
                }
            }
        }

    }

    private void initDragNDrop() {
        cbMultipleEntities.setSelectedIndex(0);
        lbAllActors.setDragEnabled(true);
        lbAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private final Set<Actor> actors = new TreeSet<>();
    private final Set<Actor> allActors = new TreeSet<>();

    private final DefaultListModel<Actor> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Object> allActorsModel = new DefaultListModel<>();

    private final Set<Director> directors = new TreeSet<>();
    private final Set<Director> allDirectors = new TreeSet<>();

    private final DefaultListModel<Director> directorsModel = new DefaultListModel<>();
    private final DefaultListModel<Object> allDirectorsModel = new DefaultListModel<>();

    private final Set<Genre> genres = new TreeSet<>();
    private final Set<Genre> allGenres = new TreeSet<>();

    private final DefaultListModel<Genre> genresModel = new DefaultListModel<>();
    private final DefaultListModel<Object> allGenresModel = new DefaultListModel<>();


    private void cbMultipleEntitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMultipleEntitiesActionPerformed
        String item = (String) cbMultipleEntities.getSelectedItem();
        switch (item) {
            case "All actors" -> {
                lbAllActors.setTransferHandler(new ExportHandlerActor());
                lbDirectors.setDropMode(DropMode.USE_SELECTION);
                lbGenres.setDropMode(DropMode.USE_SELECTION);
                lbActors.setDropMode(DropMode.ON);
                lbActors.setTransferHandler(new ImportHandlerActor());

                btnAddActor.setText("Add Actor");

                try {
                    loadAllActorsModelWithActors();
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "All directors" -> {
                lbAllActors.setTransferHandler(new ExportHandlerDirector());
                lbActors.setDropMode(DropMode.USE_SELECTION);
                lbGenres.setDropMode(DropMode.USE_SELECTION);
                lbDirectors.setDropMode(DropMode.ON);
                lbDirectors.setTransferHandler(new ImportHandlerDirector());

                btnAddActor.setText("Add Director");

                try {
                    loadAllActorsModelWithDirectors();
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "All genres" -> {
                lbAllActors.setTransferHandler(new ExportHandlerGenre());
                lbDirectors.setDropMode(DropMode.USE_SELECTION);
                lbActors.setDropMode(DropMode.USE_SELECTION);
                lbGenres.setDropMode(DropMode.ON);
                lbGenres.setTransferHandler(new ImportHandlerGenre());

                btnAddActor.setText("Add Genre");
                try {
                    loadAllActorsModelWithGenres();
                } catch (Exception ex) {
                    Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            default -> {
            }
        }
    }//GEN-LAST:event_cbMultipleEntitiesActionPerformed

    private void btnSaveXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveXmlActionPerformed
        try {
            List<Movie> movies = repository.selectMovies();
            List<MovieXML> movieXMLs = new ArrayList<>();
            for (Movie movie : movies) {
                List<Actor> movieActors = repository.getActorsForMovie(movie.getId());
                List<Director> movieDirectors = repository.getDirectorsForMovie(movie.getId());
                List<Genre> movieGenres = repository.getGenresForMovie(movie.getId());
                
                MovieXML movieXML = new MovieXML(movie, movieActors, movieDirectors, movieGenres);
                movieXMLs.add(movieXML);
            }
            
            MovieArchive movieArchive = new MovieArchive(movieXMLs);
            
            JAXBUtils.save(movieArchive, FILENAME);
            
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveXmlActionPerformed
    
    private static final String FILENAME = "src/main/resources/xml/moviearchive.xml";
    private static final String DIR = "assets";
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    private Repository repository;
    private Movie selectedMovie;

    private MovieTableModel model;

    private void initTable() throws Exception {
        tbMovies.setRowHeight(25);
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);

        model = new MovieTableModel(repository.selectMovies());
        tbMovies.setModel(model);
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void init() {
        try {
            initValidation();
            hideErrors();
            initRepository();
            initTable();
            initDragNDrop();
            initListeners();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfTitle, tfPubDate, tfDuration, tfYear, tfTrailerURL, tfPicturePath, tfDescription
        );
        errorLabels = Arrays.asList(
                lbTitleError, lbPubDateError, lbDurationError, lbYearError, lbTrailerURLError, lbPicturePathError, lbDescriptionError
        );
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
        lbActorsError.setVisible(false);
        lbDirectorsError.setVisible(false);
        lbGenresError.setVisible(false);
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(),
                            Movie.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
        }

        if (actorsModel.isEmpty()) {
            lbActorsError.setVisible(true);
            ok = false;
        }

        if (directorsModel.isEmpty()) {
            lbDirectorsError.setVisible(true);
            ok = false;
        }

        if (genresModel.isEmpty()) {
            lbGenresError.setVisible(true);
            ok = false;
        }
        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        selectedMovie = null;
        
        actors.clear();
        directors.clear();
        genres.clear();
        actorsModel.clear();
        directorsModel.clear();
        genresModel.clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnChoosePicture;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnSaveXml;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JComboBox<String> cbMultipleEntities;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JList<Actor> lbActors;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JList<Object> lbAllActors;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JList<Director> lbDirectors;
    private javax.swing.JLabel lbDirectorsError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JList<Genre> lbGenres;
    private javax.swing.JLabel lbGenresError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbPicturePathError;
    private javax.swing.JLabel lbPubDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JLabel lbTrailerURLError;
    private javax.swing.JLabel lbYearError;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextArea tfDescription;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfTrailerURL;
    private javax.swing.JTextField tfYear;
    // End of variables declaration//GEN-END:variables

    private String uploadPicture() throws IOException {
        String source = tfPicturePath.getText().trim();

        String ext = source.substring(source.lastIndexOf("."));

        String name = UUID.randomUUID() + ext;
        String dest = DIR + File.separator + name;

        FileUtils.copy(source, dest);

        return dest;
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();

        int rowID = tbMovies.convertRowIndexToModel(selectedRow);

        int id = (int) model.getValueAt(rowID, 0);

        try {
            Optional<Movie> opt = repository.selectMovie(id);
            if (opt.isPresent()) {
                selectedMovie = opt.get();
                fillForm(selectedMovie);
            }
        } catch (Exception e) {
        }

    }

    private void fillForm(Movie movie) {
        tfTitle.setText(movie.getTitle());
        tfPubDate.setText(movie.getPubDate().format(Movie.DATE_FORMATTER));
        tfDescription.setText(movie.getDescription());
        tfTrailerURL.setText(movie.getTrailerURL());
        tfYear.setText(movie.getYear().toString());
        tfDuration.setText(movie.getDuration().toString());

        if (movie.getPosterURL() != null && Files.exists(Paths.get(movie.getPosterURL()))) {
            setIcon(lbIcon, new File(movie.getPosterURL()));
            tfPicturePath.setText(movie.getPosterURL());
        }
    }

    public void loadAllActorsModelWithActors() throws Exception {
        allActorsModel.clear();
        allActors.clear();
        List<Actor> selectActors = repository.selectActors();
        for (Actor actor : selectActors) {
            allActors.add(actor);
        }
        allActors.forEach(allActorsModel::addElement);
        lbAllActors.setModel(allActorsModel);
    }

    private void loadActorsModel() throws Exception {
        actorsModel.clear();
        actors.clear();
        int selectedRow = tbMovies.getSelectedRow();
        Object firstColumnValue = tbMovies.getValueAt(selectedRow, 0);
        System.out.println((int) firstColumnValue);
        List<Actor> actors1 = repository.getActorsForMovie((int) firstColumnValue);

        for (Actor actor : actors1) {
            actors.add(actor);
        }
        actors.forEach(actorsModel::addElement);
        lbActors.setModel(actorsModel);
    }

    public void loadAllActorsModelWithDirectors() throws Exception {
        allDirectorsModel.clear();
        allDirectors.clear();
        List<Director> selectDirectors = repository.selectDirectors();
        for (Director director : selectDirectors) {
            allDirectors.add(director);
        }
        allDirectors.forEach(allDirectorsModel::addElement);
        lbAllActors.setModel(allDirectorsModel);
    }

    private void loadDirectorsModel() throws Exception {
        directorsModel.clear();
        directors.clear();
        int selectedRow = tbMovies.getSelectedRow();
        Object firstColumnValue = tbMovies.getValueAt(selectedRow, 0);
        System.out.println((int) firstColumnValue);
        List<Director> directors1 = repository.getDirectorsForMovie((int) firstColumnValue);

        for (Director director : directors1) {
            directors.add(director);
        }
        directors.forEach(directorsModel::addElement);
        lbDirectors.setModel(directorsModel);
    }

    public void loadAllActorsModelWithGenres() throws Exception {
        allGenresModel.clear();
        allGenres.clear();
        List<Genre> selectGenres = repository.selectGenres();
        for (Genre genre : selectGenres) {
            allGenres.add(genre);
        }
        allGenres.forEach(allGenresModel::addElement);
        lbAllActors.setModel(allGenresModel);
    }

    private void loadGenresModel() throws Exception {
        genresModel.clear();
        genres.clear();
        int selectedRow = tbMovies.getSelectedRow();
        Object firstColumnValue = tbMovies.getValueAt(selectedRow, 0);
        System.out.println((int) firstColumnValue);
        List<Genre> genres1 = repository.getGenresForMovie((int) firstColumnValue);

        for (Genre genre : genres1) {
            genres.add(genre);
        }
        genres.forEach(genresModel::addElement);
        lbGenres.setModel(genresModel);
    }

    private <T> void initListeners() {
        JPopupMenu contextMenuActors = new JPopupMenu();
        JPopupMenu contextMenuDirectors = new JPopupMenu();
        JPopupMenu contextMenuGenres = new JPopupMenu();

        initContextMenu(lbActors, contextMenuActors, actors);
        initContextMenu(lbDirectors, contextMenuGenres, directors);
        initContextMenu(lbGenres, contextMenuDirectors, genres);

        lbAllActors.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (lbAllActors.getSelectedIndex() != -1 && SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
                    handleDoubleClick();
                }
            }
        });

        lbActors.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Actor actor = lbActors.getSelectedValue();
                DefaultListModel<Actor> ActorsModel = (DefaultListModel<Actor>) lbActors.getModel();

                if (lbActors.getSelectedIndex() != -1 && SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
                    handleDoubleClickMovie(lbActors, (parentFrame, selectedItem) -> {
                        new ActorInfo(parentFrame, true, (Actor) selectedItem).setVisible(true);
                    });

                    if (tbMovies.getSelectedRow() == -1) {
                        cbMultipleEntities.setSelectedIndex(0);
                        DefaultListModel<Object> allActorsModel = (DefaultListModel<Object>) lbAllActors.getModel();
                        if (!allActorsModel.contains(actor)) {
                            ActorsModel.removeElement(actor);
                            lbActors.setModel(ActorsModel);
                            actors.remove(actor);
                            cbMultipleEntities.setSelectedIndex(0);
                        }
                    }
                }
            }
        });

        lbDirectors.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {

                Director director = lbDirectors.getSelectedValue();
                DefaultListModel<Director> directorsModel = (DefaultListModel<Director>) lbDirectors.getModel();

                if (lbDirectors.getSelectedIndex() != -1 && SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
                    handleDoubleClickMovie(lbDirectors, (parentFrame, selectedItem) -> {
                        new DirectorInfo(parentFrame, true, (Director) selectedItem).setVisible(true);
                    });

                    if (tbMovies.getSelectedRow() == -1) {
                        cbMultipleEntities.setSelectedIndex(1);
                        DefaultListModel<Object> allActorsModel = (DefaultListModel<Object>) lbAllActors.getModel();
                        if (!allActorsModel.contains(director)) {
                            directorsModel.removeElement(director);
                            lbDirectors.setModel(directorsModel);
                            directors.remove(director);
                            cbMultipleEntities.setSelectedIndex(1);
                        }
                    }
                }
            }
        });

        lbGenres.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Genre genre = lbGenres.getSelectedValue();
                DefaultListModel<Genre> GenresModel = (DefaultListModel<Genre>) lbGenres.getModel();

                if (lbGenres.getSelectedIndex() != -1 && SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
                    handleDoubleClickMovie(lbGenres, (parentFrame, selectedItem) -> {
                        new GenreInfo(parentFrame, true, (Genre) selectedItem).setVisible(true);
                    });
                    
                    if (tbMovies.getSelectedRow() == -1) {
                        cbMultipleEntities.setSelectedIndex(2);
                        DefaultListModel<Object> allActorsModel = (DefaultListModel<Object>) lbAllActors.getModel();
                        if (!allActorsModel.contains(genre)) {
                            GenresModel.removeElement(genre);
                            lbGenres.setModel(GenresModel);
                            genres.remove(genre);
                            cbMultipleEntities.setSelectedIndex(2);
                        }
                    }

                }
            }
        });
    }

    private <T> void handleDoubleClickMovie(JList<T> list, ModalWindowCreator<T> modalCreator) {

        Frame parentFrame = (Frame) SwingUtilities.getWindowAncestor(this);

        if (list.getSelectedIndex() != -1) {
            try {
                T selectedItem = list.getSelectedValue();
                modalCreator.createAndShowModal(parentFrame, selectedItem);
                loadAllActorsModelWithActors();

                if (tbMovies.getSelectedRow() != -1) {
                    loadActorsModel();
                }
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private <T> void initContextMenu(JList<T> list, JPopupMenu contextMenu, Set<T> dataList) {
        JMenuItem deleteItem = new JMenuItem("Delete from list");

        contextMenu.add(deleteItem);

        deleteItem.addActionListener((ActionEvent e) -> {
            int selectedIndex = list.getSelectedIndex();

            if (selectedIndex != -1) {
                T element = list.getModel().getElementAt(selectedIndex);
                ((DefaultListModel<T>) list.getModel()).remove(selectedIndex);
                dataList.remove(element);

            }
        });

        list.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    int index = list.locationToIndex(e.getPoint());
                    if (index != -1) {
                        list.setSelectedIndex(index); // Выделяем элемент под курсором
                        contextMenu.show(list, e.getX(), e.getY());
                    }
                }
            }
        });
    }

    private class ImportHandlerActor extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            DataFlavor[] flavors = support.getDataFlavors();
            for (DataFlavor flavor : flavors) {
                if (flavor.getRepresentationClass().equals(Actor.class)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public boolean importData(TransferSupport support) {
            if (!support.isDrop()) {
                return false;
            }

            Transferable transferable = support.getTransferable();
            try {
                DataFlavor actorFlavor = new DataFlavor(Actor.class, Actor.class.getSimpleName());
                Actor data = (Actor) transferable.getTransferData(actorFlavor);
                if (actors.add(data)) {
                    loadActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        private void loadActorsModel() {
            actorsModel.clear();
            actors.forEach(actorsModel::addElement);
            lbActors.setModel(actorsModel);
        }
    }

    private class ExportHandlerActor extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenericTransferable(lbAllActors.getSelectedValue(), Actor.class);
        }
    }

    private class ImportHandlerDirector extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            DataFlavor[] flavors = support.getDataFlavors();
            for (DataFlavor flavor : flavors) {
                if (flavor.getRepresentationClass().equals(Director.class)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public boolean importData(TransferSupport support) {
            if (!support.isDrop()) {
                return false;
            }

            Transferable transferable = support.getTransferable();
            try {
                DataFlavor actorFlavor = new DataFlavor(Director.class, Director.class.getSimpleName());
                Director data = (Director) transferable.getTransferData(actorFlavor);
                if (directors.add(data)) {
                    loadDirectorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        private void loadDirectorsModel() {
            directorsModel.clear();
            directors.forEach(directorsModel::addElement);
            lbDirectors.setModel(directorsModel);
        }
    }

    private class ExportHandlerDirector extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenericTransferable(lbAllActors.getSelectedValue(), Director.class);
        }
    }

    private class ImportHandlerGenre extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            DataFlavor[] flavors = support.getDataFlavors();
            for (DataFlavor flavor : flavors) {
                if (flavor.getRepresentationClass().equals(Genre.class)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public boolean importData(TransferSupport support) {
            if (!support.isDrop()) {
                return false;
            }

            Transferable transferable = support.getTransferable();
            try {
                DataFlavor actorFlavor = new DataFlavor(Genre.class, Genre.class.getSimpleName());
                Genre data = (Genre) transferable.getTransferData(actorFlavor);
                if (genres.add(data)) {
                    loadGenresModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        private void loadGenresModel() {
            genresModel.clear();
            genres.forEach(genresModel::addElement);
            lbGenres.setModel(genresModel);
        }
    }

    private class ExportHandlerGenre extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenericTransferable(lbAllActors.getSelectedValue(), Genre.class);
        }
    }
}
