/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Role;
import hr.algebra.model.User;
import hr.algebra.utilities.MessageUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;


/**
 *
 * @author andru
 */
public class UsersPanel extends javax.swing.JPanel {
            private List<User> users;
            private List<Role> roles;
    /**
     * Creates new form UsersPanel
     */
    public UsersPanel() {
        initComponents();
        initRepository();
        initTables();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tbAdmins = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbUsers = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1238, 772));

        tbAdmins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbAdmins);

        btnSave.setText("Save changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        tbUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tbUsers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (tbUsers.getRowCount() > 0) {
            List<User> updateUsers = new ArrayList<>();

            DefaultTableModel tableModelUsers = (DefaultTableModel) tbUsers.getModel();
            for (int i = 0; i < tableModelUsers.getRowCount(); i++) {
                int userId = (int) tableModelUsers.getValueAt(i, 0);
                String selectedRole = (String) tableModelUsers.getValueAt(i, 3);

                if (!selectedRole.equals("User")) {
                    User updateUser = null;
                    for (User user : users) {
                        if (user.getId() == userId) {
                            updateUser = user;
                            break;
                        }
                    }

                    if (selectedRole.equals("Admin")) {
                        updateUser.setRoleID(2);
                    }

                    updateUsers.add(updateUser);
                }
            }

            new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() {
                    for (User updateUser : updateUsers) {
                        try {
                            repository.updateUser(updateUser.getId(), updateUser);
                        } catch (Exception ex) {
                            Logger.getLogger(UsersPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    return null;
                }

                @Override
                protected void done() {
                    initTables();
                    MessageUtils.showInformationMessage("Info", "Users are successfully updated");
                }
            }.execute();
        }
        else{
            MessageUtils.showErrorMessage("Error", "There is no users in the table");
        }

    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tbAdmins;
    private javax.swing.JTable tbUsers;
    // End of variables declaration//GEN-END:variables

    private void initTables() {
    tbUsers.setRowHeight(25);
    tbUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    
    tbAdmins.setRowHeight(25);
    tbAdmins.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    tbAdmins.setDefaultEditor(Object.class, null);
    
    roles = new ArrayList<>();
    users = new ArrayList<>();

    new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() {
            try {
                users = repository.selectUsers();
                roles = repository.selectRoles();
            } catch (Exception ex) {
                Logger.getLogger(UsersPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;
        }

        @Override
        protected void done() {
            DefaultTableModel tableModelUsers = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{"ID", "Username", "Role", "Assign new role"}
            ) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 3;
                }
            };
            
            DefaultTableModel tableModelAdmins = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{"ID", "Username", "Role"}
            );

            JComboBox<String> comboBox = new JComboBox<>();
            for (Role role : roles) {
                comboBox.addItem(role.getName());
            }

            for (User user : users) {
                String roleName = (user.getRoleID() == 1) ? "User" : (user.getRoleID() == 2) ? "Admin" : "";
                if (roleName.equals("User")) {
                    tableModelUsers.addRow(new Object[]{user.getId(), user.getUsername(), roleName, comboBox.getItemAt(0)});
                }
                if (roleName.equals("Admin")) {
                    tableModelAdmins.addRow(new Object[]{user.getId(), user.getUsername(), roleName});
                }
            }

            tbUsers.setModel(tableModelUsers);
            tbAdmins.setModel(tableModelAdmins);
            
            TableColumn roleColumn = tbUsers.getColumnModel().getColumn(3);
            roleColumn.setCellEditor(new DefaultCellEditor(comboBox));
        }
    }.execute();
    }
    
    private Repository repository;

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

}
