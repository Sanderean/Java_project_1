/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieActor;
import hr.algebra.model.MovieDirector;
import hr.algebra.model.MovieGenre;
import hr.algebra.model.ParsedData;
import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.UploadMovieTableModel;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;

/**
 *
 * @author andru
 */
public class UploadMoviesPanel extends javax.swing.JPanel {

    private static final String EXT = ".jpg";
    private static final String DIR = "assets";

    /**
     * Creates new form UploadMoviesPanel
     */
    public UploadMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpload = new javax.swing.JButton();
        btnDeleteAllTables = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbParsedData = new javax.swing.JTable();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnUpload.setText("Upload Movies");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDeleteAllTables.setText("Delete All Tables");
        btnDeleteAllTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllTablesActionPerformed(evt);
            }
        });

        tbParsedData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbParsedData);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteAllTables, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteAllTables, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteAllTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllTablesActionPerformed
        new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    repository.deleteAllTables();

                    String relativePath = "assets";
                    String projectPath = System.getProperty("user.dir");
                    String directoryPath = projectPath + File.separator + relativePath;

                    File directory = new File(directoryPath);

                    if (directory.isDirectory()) {
                        File[] files = directory.listFiles();
                        if (files != null) {
                            for (File file : files) {
                                if (file.isFile()) {
                                    if (file.delete()) {
                                        System.out.println("File " + file.getName() + " deleted.");
                                    } else {
                                        System.out.println("Can not delete the file " + file.getName());
                                    }
                                }
                            }
                        }
                    } else {
                        System.out.println(directoryPath + " is not a directory.");
                    }

                } catch (Exception ex) {
                    Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    throw ex;
                }
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                    MessageUtils.showInformationMessage("Info", "All tables and files deleted successfully.");
                } catch (InterruptedException | ExecutionException e) {
                    MessageUtils.showErrorMessage("Error", "Failed to delete tables and files: " + e.getMessage());
                }
            }
        }.execute();
    }//GEN-LAST:event_btnDeleteAllTablesActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
        initTable();

        new SwingWorker<List<ParsedData>, Void>() {
            @Override
            protected List<ParsedData> doInBackground() throws Exception {
                return MovieParser.parse();
            }

            @Override
            protected void done() {
                try {
                    List<ParsedData> parsedDataList = get();
                    Set<ParsedData> treeSet = new TreeSet<>(parsedDataList);
                    model = new UploadMovieTableModel(treeSet);
                    tbParsedData.setModel(model);
                } catch (InterruptedException | ExecutionException e) {
                    Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        }.execute();
    }//GEN-LAST:event_formComponentShown

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        if (tbParsedData.getRowCount() < 1) {
            return;
        }

        new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    List<Movie> selectMovies = repository.selectMovies();

                    for (int i = 0; i < tbParsedData.getRowCount(); i++) {
                        String title = tbParsedData.getValueAt(i, 0) != null ? tbParsedData.getValueAt(i, 0).toString().trim() : "";
                        LocalDateTime releaseDate = tbParsedData.getValueAt(i, 1) != null
                                ? LocalDateTime.parse(tbParsedData.getValueAt(i, 1).toString().trim(), Movie.DATE_FORMATTER)
                                : LocalDateTime.now(); // Default value (current time)
                        String language = tbParsedData.getValueAt(i, 2) != null ? tbParsedData.getValueAt(i, 2).toString().trim() : "";
                        int duration = tbParsedData.getValueAt(i, 3) != null ? Integer.parseInt(tbParsedData.getValueAt(i, 3).toString().trim()) : 0;
                        int score = tbParsedData.getValueAt(i, 4) != null ? Integer.parseInt(tbParsedData.getValueAt(i, 4).toString().trim()) : 0;
                        String posterURL = tbParsedData.getValueAt(i, 5) != null ? tbParsedData.getValueAt(i, 5).toString().trim() : "";
                        String trailerURL = tbParsedData.getValueAt(i, 6) != null ? tbParsedData.getValueAt(i, 6).toString().trim() : "";

                        Movie movie = new Movie(title, releaseDate, language, duration, score, posterURL, trailerURL);

                        if (!selectMovies.contains(movie)) {
                            handlePicture(movie, movie.getPosterURL());
                            int idMovie = repository.createMovie(movie);

                            String actorsCellValue = (String) tbParsedData.getValueAt(i, 8);
                            String[] actorsArray = splitAndFilter(actorsCellValue);
                            String directorsCellValue = (String) tbParsedData.getValueAt(i, 7);
                            String[] directorsArray = splitAndFilter(directorsCellValue);
                            String genresCellValue = (String) tbParsedData.getValueAt(i, 9);
                            String[] genresArray = splitAndFilter(genresCellValue);

                            List<MovieActor> movieActors = new ArrayList<>();
                            List<MovieDirector> movieDirectors = new ArrayList<>();
                            List<MovieGenre> movieGenres = new ArrayList<>();

                            for (String actorName : actorsArray) {
                                if (actorName != null) {
                                    int idActor = getOrCreateActorId(actorName.trim());
                                    MovieActor movieActor = new MovieActor(idMovie, idActor);
                                    movieActors.add(movieActor);
                                }
                            }

                            if (!movieActors.isEmpty()) {
                                repository.createMovieActors(movieActors);
                            }

                            for (String directorName : directorsArray) {
                                if (directorName != null) {
                                    int idDirector = getOrCreateDirectorId(directorName.trim());
                                    MovieDirector movieDirector = new MovieDirector(idMovie, idDirector);
                                    movieDirectors.add(movieDirector);
                                }
                            }

                            if (!movieDirectors.isEmpty()) {
                                repository.createMovieDirectors(movieDirectors);
                            }

                            for (String genreName : genresArray) {
                                if (genreName != null) {
                                    int idGenre = getOrCreateGenreId(genreName.trim());
                                    MovieGenre movieGenre = new MovieGenre(idMovie, idGenre);
                                    movieGenres.add(movieGenre);
                                }
                            }

                            if (!movieGenres.isEmpty()) {
                                repository.createMovieGenres(movieGenres);
                            }

                        } else {
                            MessageUtils.showErrorMessage("Error", movie.getTitle() + " already exists");
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(UploadMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    throw ex;
                }
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                    MessageUtils.showInformationMessage("Info", "Movies uploaded successfully.");
                } catch (InterruptedException | ExecutionException e) {
                    MessageUtils.showErrorMessage("Error", "Failed to upload movies: " + e.getMessage());
                }
            }

            private int getOrCreateActorId(String actorName) throws Exception {
                int idActor = 0;
                Actor actor = new Actor(actorName);
                List<Actor> actors = repository.selectActors();
                if (!actors.contains(actor)) {
                    idActor = repository.createActor(actor);
                } else {
                    for (Actor item : actors) {
                        if (item.getName().equals(actor.getName())) {
                            idActor = item.getId();
                            break;
                        }
                    }
                }
                return idActor;
            }

            private int getOrCreateDirectorId(String directorName) throws Exception {
                int idDirector = 0;
                Director director = new Director(directorName);
                List<Director> directors = repository.selectDirectors();
                if (!directors.contains(director)) {
                    idDirector = repository.createDirector(director);
                } else {
                    for (Director item : directors) {
                        if (item.getName().equals(director.getName())) {
                            idDirector = item.getId();
                            break;
                        }
                    }
                }
                return idDirector;
            }

            private int getOrCreateGenreId(String genreName) throws Exception {
                int idGenre = 0;
                Genre genre = new Genre(genreName);
                List<Genre> genres = repository.selectGenres();
                if (!genres.contains(genre)) {
                    idGenre = repository.createGenre(genre);
                } else {
                    for (Genre item : genres) {
                        if (item.getName().equals(genre.getName())) {
                            idGenre = item.getId();
                            break;
                        }
                    }
                }
                return idGenre;
            }
        }.execute();
    }//GEN-LAST:event_btnUploadActionPerformed

    private String[] splitAndFilter(String cellValue) {
    if (cellValue == null || cellValue.trim().isEmpty()) {
        return new String[0];
    }
    
    String[] parts = cellValue.split(",");
    List<String> resultList = new ArrayList<>();
    
    for (String part : parts) {
        String[] subParts = part.trim().split("\\b(?:and|i)\\b");
        for (String subPart : subParts) {
            if (!subPart.trim().isEmpty()) {
                resultList.add(subPart.trim());
            }
        }
    }
    
    return resultList.toArray(String[]::new);
}
    
    private static void handlePicture(Movie movie, String pictureUrl) {
        try {
            if (pictureUrl == null || pictureUrl.isEmpty()) {
                return;
            }

            int lastIndex = pictureUrl.lastIndexOf(".");
            String ext = EXT;

            if (lastIndex != -1) {
                ext = pictureUrl.substring(lastIndex);
                if (ext.length() > 4) {
                    ext = ".jpg";
                }
            }

            String pictureName = UUID.randomUUID() + ext;
            String localPicturePath = DIR + File.separator + pictureName;

            FileUtils.copyFromUrl(pictureUrl, localPicturePath);
            // put breakpoint
            movie.setPosterURL(localPicturePath);

        } catch (IOException ex) {
            Logger.getLogger(MovieParser.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAllTables;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbParsedData;
    // End of variables declaration//GEN-END:variables

    private void init() {
        initRepository();
    }

    private Repository repository;

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }
    private UploadMovieTableModel model;

    private void initTable() {
        tbParsedData.setRowHeight(25);
        tbParsedData.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbParsedData.setAutoCreateRowSorter(true);
    }
}
